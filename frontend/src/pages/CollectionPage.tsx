import React from "react";
import { useParams, useNavigate } from "react-router-dom";
import { getAllRecipes } from "../data/recipes";
import type { Recipe } from "../data/recipes";
import RecipeCard from "../components/RecipeCard";
import Header from "../components/Header";
import { FaSearch } from "react-icons/fa";
import styles from "./CollectionPage.module.scss";
import iconBook from "../assets/menu_icon/icon-park-outline_notebook-one.svg"
import {ChevronDown} from "lucide-react";
import iconFilter from "../assets/icon-park-outline_center-alignment.svg"

interface Collection {
  id: string;
  name: string;
  recipes: { id: string; dateSaved: string }[];
}

const CollectionPage: React.FC = () => {
  const { id } = useParams<{ id: string }>();
  const navigate = useNavigate();

  const collections: Collection[] = JSON.parse(localStorage.getItem("savedCollections") || "[]");
  const collection = collections.find(c => c.id === id);

  if (!collection) return <p>–ö–æ–ª–µ–∫—Ü—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞</p>;

  const savedRecipes: Recipe[] = collection.recipes
    .map(item => getAllRecipes().find(r => r.id === item.id))
    .filter((r): r is Recipe => r !== undefined);

  return (
    <main className={styles.main}>
<Header
  showSearch={false}
  customSearch={
    <div className={styles.customSearchWrapper}>
      <FaSearch className={styles.searchIcon} />
      <input
        type="text"
        className={styles.customSearch}
        placeholder="–ü–æ—à—É–∫‚Ä¶"
      />
    </div>
  }
  showBackButton
  backButtonLabel="–î–æ –∫–æ–ª–µ–∫—Ü—ñ–π"   // üëà —Å–≤–æ–π —Ç–µ–∫—Å—Ç
  onBackClick={() => navigate(-1)}
/>

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏: –Ω–∞–∑–≤–∞–Ω–∏–µ + –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ü–µ–ø—Ç–æ–≤ */}
      <div className={styles.collectionInfoLine}>
        <div className={styles.collectionNameBlock}>
        <h1 className={styles.collectionName}>{collection.name}</h1>
        <div className={styles.recipeCountBlock}>
          <img src={iconBook} alt="book"/>
        <p className={styles.recipeCount}>
          {savedRecipes.length} {savedRecipes.length === 1 ? "—Ä–µ—Ü–µ–ø—Ç" : "—Ä–µ—Ü–µ–ø—Ç—ñ–≤"}
        </p>
        </div>
        </div>
             <div className={styles.SortButtonBlock}>
            <button className={styles.SortButton}>
          –°–æ—Ä—Ç—É–≤–∞—Ç–∏ –∑–∞ <ChevronDown size={16} />
        </button>
              <button className={styles.filterButton}>
          –§—ñ–ª—å—Ç—Ä
          <img src={iconFilter} alt="filter" />
        </button>
         </div>
      </div>

      {/* –°–µ—Ç–∫–∞ —Å —Ä–µ—Ü–µ–ø—Ç–∞–º–∏ */}
      {savedRecipes.length === 0 ? (
        <p className={styles.empty}>–ö–æ–ª–µ–∫—Ü—ñ—è –ø–æ—Ä–æ–∂–Ω—è</p>
      ) : (
        <div className={styles.recipesGrid}>
          {savedRecipes.map(recipe => (
            <RecipeCard key={recipe.id} {...recipe} />
          ))}
        </div>
      )}
    </main>
  );
};

export default CollectionPage;
