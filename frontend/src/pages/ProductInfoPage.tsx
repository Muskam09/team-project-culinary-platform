import React, { useState } from "react";
import { useParams, useNavigate, useLocation } from "react-router-dom";
import Header from "../components/Header";
import styles from "./ProductInfoPage.module.scss";
import flagIcon from "../assets/icon-park-outline_tag.svg";
import exportIcon from "../assets/icon-park-outline_export.svg";
import iconComplexity from "../assets/icon-park-outline_hamburger-button.svg";
import iconTime from "../assets/icon-park-outline_time.svg";
import iconStar from "../assets/icon-park-outline_star.svg";
import iconCalendar from "../assets/icon-park-outline_calendar.svg";
import iconPrinter from "../assets/icon-park-outline_printer-one.svg";
import iconCamera from "../assets/icon-park-outline_camera.svg";
import like from "../assets/icon-park-outline_good-two.svg";
import dislike from "../assets/icon-park-outline_bad-two.svg";
import more_one from "../assets/icon-park-outline_more-one.svg";
import { FaSearch } from "react-icons/fa";
import { recipeDetails } from "../data/recipeDetails"
import { getAllRecipes, getAllAuthors  } from "../data/recipes";
import type { Author } from "../data/recipes";
import { FaArrowRight } from "react-icons/fa";
import RecipeCard from "../components/RecipeCard";
import { ChevronRight } from "lucide-react";

interface SavedItem {
  id: string;
  title: string;
  category: string;
  dateSaved: string;
}

const ProductInfoPage: React.FC = () => {
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
  const [comments, setComments] = useState([
    { author: "–ú–∞—Ä—ñ—è –ö–æ–≤–∞–ª–µ–Ω–∫–æ", email: "@marriKoval",likes: 3, dislikes: 0, date: "05.09.2025",rating: 4, text: "–î—É–∂–µ —Å–º–∞—á–Ω–æ! –ì–æ—Ç—É–≤–∞–ª–∞ –Ω–∞ –æ–±—ñ–¥ –¥–ª—è —Å—ñ–º‚Äô—ó ‚Äî —É—Å—ñ –±—É–ª–∏ —É –∑–∞—Ö–≤–∞—Ç—ñ. –°–∏—Ä –¥–æ–¥–∞–≤ —Å—Ç—Ä–∞–≤—ñ –Ω—ñ–∂–Ω–æ—Å—Ç—ñ, –∞ –∫–∞–ø—É—Å—Ç–∞ –∑–∞–ª–∏—à–∏–ª–∞—Å—è —Å–æ–∫–æ–≤–∏—Ç–æ—é." },
  { author: "–ê–Ω–¥—Ä—ñ–π –ö–æ–≤–∞–ª–µ–Ω–∫–æ", email: "@andriKoval",likes: 5, dislikes: 6, date: "04.09.2025",rating: 2, text: "–î–æ–¥–∞–≤ —Ç—Ä–æ—Ö–∏ –±—ñ–ª—å—à–µ —Å–ø–µ—Ü—ñ–π, –≤–∏–π—à–ª–æ —Å—É–ø–µ—Ä!" },
    { author: "–Ü—Ä–∏–Ω–∞ –°–∞–≤—ñ–Ω–∞", email: "@savinaIrina",likes: 10, dislikes: 15, date: "1 –º—ñ—Å—è—Ü—å —Ç–æ–º—É ",rating: 3, text: "–í—ñ–¥–º—ñ–Ω–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç –¥–ª—è —Ç–∏—Ö, —Ö—Ç–æ —Å–ª—ñ–¥–∫—É—î –∑–∞ —Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è–º. –õ–µ–≥–∫–æ, —Å–º–∞—á–Ω–æ —ñ –∫–æ—Ä–∏—Å–Ω–æ. –ù–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ä–∞–∑—É —Å–ø—Ä–æ–±—É—é —â–µ –∑ —ñ–Ω—à–∏–º–∏ —Å–ø–µ—Ü—ñ—è–º–∏." },
]);
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–∞–π–∫–æ–≤/–¥–∏–∑–ª–∞–π–∫–æ–≤
  const handleLike = (index: number, type: "like" | "dislike") => {
  setComments((prev) =>
    prev.map((c, i) => {
      if (i === index) {
        return {
          ...c,
          likes: type === "like" ? c.likes + 1 : c.likes,
          dislikes: type === "dislike" ? c.dislikes + 1 : c.dislikes,
        };
      }
      return c;
    })
  );
};
  const [rating, setRating] = useState(0);
const [hoverRating, setHoverRating] = useState(0);

  // –ü–æ–ª—É—á–∞–µ–º ID —Ä–µ—Ü–µ–ø—Ç–∞ –∏–∑ URL
  const { id } = useParams<{ id: string }>();
  const navigate = useNavigate();
  const recipe = getAllRecipes().find((r) => r.id === id);
  const details = recipeDetails.find((r) => r.id === id);
  
  if (!recipe || !details) return <p>–†–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω</p>;

  const [servings, setServings] = useState(1);

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
  const [selectedIngredients, setSelectedIngredients] = useState<boolean[]>(
    details.ingredients.map(() => false)
  );

  const handleIncrease = () => setServings((s) => s + 1);
  const handleDecrease = () => setServings((s) => (s > 1 ? s - 1 : 1));

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞
  const toggleIngredient = (index: number) => {
    setSelectedIngredients((prev) =>
      prev.map((v, i) => (i === index ? !v : v))
    );
  };

  // –í—ã–±—Ä–∞—Ç—å –≤—Å–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
  const selectAll = () => setSelectedIngredients(details.ingredients.map(() => true));

  // –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
  const clearAll = () => setSelectedIngredients(details.ingredients.map(() => false));

  let authorData: Author | undefined = getAllAuthors().find(
    (a) => a.name.trim().toLowerCase() === recipe.author.trim().toLowerCase()
  );

  // –ï—Å–ª–∏ –∞–≤—Ç–æ—Ä–∞ –Ω–µ—Ç –≤ –º–∞—Å—Å–∏–≤–µ, —Å–æ–∑–¥–∞—ë–º "–ø—É—Å—Ç—É—é" –∫–∞—Ä—Ç–æ—á–∫—É
  if (!authorData) {
    authorData = {
      id: `a_${recipe.id}`,
      name: recipe.author,
      email: "",
      profession: "",
      recipesCount: 1,
      followers: 0,
    };
  }

  const formatFollowers = (num: number | undefined) => {
  if (!num) return "0";
  if (num >= 1000) {
    const kNum = num / 1000;
    return kNum % 1 === 0 ? Math.floor(kNum) + "k" : kNum.toFixed(1) + "k";
  }
  return num.toString();
};

  const location = useLocation();
  const targetCategory = location.state?.category || "–°–Ω—ñ–¥–∞–Ω–æ–∫";
  const selectedDate = location.state?.date; // –¥–∞—Ç–∞, –≤—ã–±—Ä–∞–Ω–Ω–∞—è –≤ MealPlannerPage

const handleSaveRecipe = () => {
  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã
  const saved: SavedItem[] = JSON.parse(localStorage.getItem("savedRecipes") || "[]");

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —Ä–µ—Ü–µ–ø—Ç
 const exists = saved.some(item => item.id === recipe.id);
  if (exists) {
    alert("–†–µ—Ü–µ–ø—Ç –≤–∂–µ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!");
    return;
  }
  const newItem: SavedItem = {
    id: recipe.id,
    title: recipe.title,
    category: targetCategory, // –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞
    dateSaved: new Date().toLocaleDateString(),
  };
    const updated = [...saved, newItem];
  localStorage.setItem("savedRecipes", JSON.stringify(updated));
     // –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ó–±–µ—Ä–µ–∂–µ–Ω–µ
  navigate("/saved");
};

// –¢–∏–ø –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫
type ShoppingItem = {
  id: string;
  name: string;
   amount?: number;
  unit?: string;
  recipeTitle?: string; // –ü–æ–∑–Ω–∞—á–∞—î–º–æ —è–∫ –æ–±–æ–≤'—è–∑–∫–æ–≤–µ, —è–∫—â–æ —Ü–µ –∑–∞–≤–∂–¥–∏ –±—É–¥–µ –∑ —Ä–µ—Ü–µ–ø—Ç–æ–º
};

// –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫
const handleAddToShoppingList = () => {
  // –í—ã–±–∏—Ä–∞–µ–º –æ—Ç–º–µ—á–µ–Ω–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
  const selectedItems: ShoppingItem[] = details.ingredients
    .filter((_, index) => selectedIngredients[index])
    .map((ingredient) => ({
      id: `${Date.now()}-${ingredient.name}-${Math.random()}`,
      name: ingredient.name,
      amount: ingredient.amount ? ingredient.amount * servings : undefined,
      unit: ingredient.unit,
      recipeTitle: recipe.title,
    }));

  if (selectedItems.length === 0) {
    alert("–û–±–µ—Ä—ñ—Ç—å —Ö–æ—á–∞ –± –æ–¥–∏–Ω —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç!");
    return;
  }

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã
  const savedProducts: ShoppingItem[] = JSON.parse(
    localStorage.getItem("shoppingProducts") || "[]"
  );

  // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ
  const updatedProducts = [...savedProducts, ...selectedItems];

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
  localStorage.setItem("shoppingProducts", JSON.stringify(updatedProducts));

  console.log("Products saved:", updatedProducts); // ‚úÖ –ª–æ–≥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏

  alert("–Ü–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç–∏ –¥–æ–¥–∞–Ω—ñ –¥–æ —Å–ø–∏—Å–∫—É –ø–æ–∫—É–ø–æ–∫!");
  navigate("/shopping-list");
};

  return (
    <main className={styles.main}>
      <Header
        showSearch={false}
        customSearch={
          <div className={styles.customSearchWrapper}>
            <FaSearch className={styles.searchIcon} />
            <input
              type="text"
              className={styles.customSearch}
              placeholder="–ü–æ—à—É–∫‚Ä¶"
            />
          </div>
        }
          showBackButton
          backButtonLabel="–î–æ —Å–ø–∏—Å–∫—É —Ä–µ—Ü–µ–ø—Ç—ñ–≤"   // üëà —Å–≤–æ–π —Ç–µ–∫—Å—Ç
          onBackClick={() => navigate(-1)}
      />

      <section className={styles.productInfo}>
        <div className={styles.imagePlaceholder}   style={{
    backgroundImage: recipe.image ? `url(${recipe.image})` : "none",
  }}>
          <div className={styles.imageTopButton}>
            <button className={styles.exportButton}>
              <img src={exportIcon} alt="export" />
            </button>
            <button className={styles.flagButton}>
              <img src={flagIcon} alt="flag" />
            </button>
          </div>

          <div className={styles.productImageInfo}>
            <div className={styles.productComplexity}>
              <div className={styles.iconComplexity}>
                <img src={iconComplexity} alt="comp" />
              </div>
              <div className={styles.textComplexity}>
                <div className={styles.details}>{recipe.complexity}</div>
                <p className={styles.titleComplexity}>–†—ñ–≤–µ–Ω—å</p>
              </div>
            </div>

            <div className={styles.productTime}>
              <div className={styles.iconComplexity}>
                <img src={iconTime} alt="time" />
              </div>
              <div className={styles.textComplexity}>
                <div className={styles.details}>{recipe.time}</div>
                <p className={styles.titleComplexity}>–ß–∞—Å –≥–æ—Ç—É–≤–∞–Ω–Ω—è</p>
              </div>
            </div>

            <div className={styles.productRating}>
              <div className={styles.iconComplexity}>
                <img src={iconStar} alt="star" />
              </div>
              <div className={styles.texComplexity}>
                <div className={styles.details}>{recipe.rating}</div>
                <p className={styles.titleComplexity}>–†–µ–π—Ç–∏–Ω–≥</p>
              </div>
            </div>
          </div>
        </div>

        <div className={styles.productTitle}>
          <h1 className={styles.title}>{recipe.title}</h1>
          <p className={styles.textMain}>{details.description}</p>
        </div>

            {/* –ë–ª–æ–∫ —Å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º–∏ –∏ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç—å—é */} 
        <div className={styles.productIngredients}>
          <div className={styles.productBlock}>
            <div className={styles.ingredientsTitle}>
              <h2 className={styles.titleIngredients}>–Ü–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç–∏</h2>
              <div className={styles.portion}>
                <p className={styles.textPortion}>–ø–æ—Ä—Ü—ñ–π:</p>
                <div className={styles.servingsControl}>
                  <button onClick={handleDecrease} className={styles.servingBtn}>-</button>
                  <span className={styles.servingsValue}>{servings}</span>
                  <button onClick={handleIncrease} className={styles.servingBtn}>+</button>
                </div>
              </div>
            </div>

            {/* –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞/–æ—á–∏—Å—Ç–∫–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ */}
            <div className={styles.monipulateIngredients}>
              <button onClick={clearAll} className={styles.cleartAll}>–û—á–∏—Å—Ç–∏—Ç–∏</button>
              <button onClick={selectAll} className={styles.checkAll}>–û–±—Ä–∞—Ç–∏ –≤—Å–µ</button>
            </div>

            {/* –°–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ */}
           <ul className={styles.ingredientsList}>
  {details.ingredients.map((ingredient, index) => {
    const amount =
      ingredient.amount !== undefined ? ingredient.amount * servings : undefined;

    return (
      <li key={index} className={styles.ingredientItem}>
        <input
          type="checkbox"
          id={`ingredient-${index}`}
          className={styles.ingredientCheckbox}
          checked={selectedIngredients[index]}       // ‚úÖ —Å–≤—è–∑—ã–≤–∞–µ–º —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
          onChange={() => toggleIngredient(index)}   // ‚úÖ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –∫–ª–∏–∫–µ
        />
        <label htmlFor={`ingredient-${index}`} className={styles.ingredientLabel}>
          <span className={styles.ingredientName}>{ingredient.name}</span>
          {amount !== undefined || ingredient.unit ? (
            <span className={styles.ingredientAmount}>
              {amount !== undefined ? amount : ""} {ingredient.unit || ""}
            </span>
          ) : null}
        </label>
      </li>
    );
  })}
</ul>

        <button
  className={styles.addToListButton}
  onClick={handleAddToShoppingList}   // ‚úÖ –∑–¥–µ—Å—å –≤—ã–∑—ã–≤–∞–µ–º –Ω–∞—à—É —Ñ—É–Ω–∫—Ü–∏—é
>
  –î–æ–¥–∞—Ç–∏ –¥–æ —Å–ø–∏—Å–∫—É –ø–æ–∫—É–ø–æ–∫
</button>
          </div>
              {/* –ë–ª–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏ */}
          <div className={styles.nutritionBlock}>
            <div className={styles.nutritionText}>
              <h2 className={styles.nutritionTitle}>–ü–æ–∂–∏–≤–Ω–∞ —Ü—ñ–Ω–Ω—ñ—Å—Ç—å</h2>
              <p className={styles.nutritionSubtitle}>(–Ω–∞ 100–≥)</p>
            </div>
               {/* –°–µ—Ç–∫–∞ —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –ø–∏—Ç–∞–Ω–∏—è */}
            <div className={styles.nutritionGrid}>
              {details.nutrition?.map((n, idx) => (
                <div key={idx} className={styles.nutritionItem}>
                  <span className={styles.nutritionName}>{n.name}</span>
                  <span className={styles.nutritionAmount}>{n.amount! * servings} {n.unit}</span>
                </div>
              ))}
            </div>
          </div>
        </div>
            {/* –ë–ª–æ–∫ —Å —à–∞–≥–∞–º–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è */}
        <section className={styles.recipeSteps}>
          <h2 className={styles.stepsTitle}>–Ø–∫ –ø—Ä–∏–≥–æ—Ç—É–≤–∞—Ç–∏</h2>
          <ol className={styles.stepsList}>
            {details.steps.map((step, idx) => (
              <li key={idx} className={styles.stepItem}>
                <div className={styles.stepHeader}>
                  <span className={styles.stepNumber}>{idx + 1}</span>
                  <h3 className={styles.stepTitle}>{step.title}</h3>
                </div>

                <p className={styles.stepDescription}>{step.description}</p>

                {step.image && (
               <img src={step.image} alt={step.title} className={styles.stepImage} />
                 )}
              </li>
            ))}
          </ol>
        </section>
        {/* –ë–ª–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π —Å —Ä–µ—Ü–µ–ø—Ç–æ–º */}
        <div className={styles.recipeActions}>
 <button className={styles.actionButton} onClick={handleSaveRecipe}>
      –ó–±–µ—Ä–µ–≥—Ç–∏
      <img src={flagIcon} alt="flag" className={styles.actionIcon} />
    </button>
  <button
      className={styles.actionButton}
      onClick={() =>
        navigate("/planner", {
          state: {
            addedRecipe: recipe,
            category: targetCategory,
            date: selectedDate || new Date().toLocaleDateString(),
          },
        })
      }
    >
      –î–æ –ø–ª–∞–Ω—É
      <img src={iconCalendar} alt="calendar" className={styles.actionIcon} />
    </button>


          <button className={styles.actionButton}>–î—Ä—É–∫—É–≤–∞—Ç–∏
            <img src={iconPrinter} alt="printer" className={styles.actionIcon} />
          </button>
          <button className={styles.actionButton}>–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—å
            <img src={exportIcon} alt="export" className={styles.actionIcon} />
          </button>
        </div>

        {/* –ë–ª–æ–∫ —Ç–µ–≥–æ–≤ */}
         <div className={styles.tagsBlock}>
          <h2 className={styles.titleTags}>–¢–µ–≥–∏</h2>
         <div className={styles.recipeTags}>
        {details.tags?.map((tag, index) => (
        <span key={index} className={styles.tag}>
          {tag}
        </span>
        ))}
        </div>
      </div>

        {/* –ë–ª–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∞–≤—Ç–æ—Ä–µ –∏ –º–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π */}
<div className={styles.customAuthorCard}>
  <p className={styles.autorcardTitle}>–ê–≤—Ç–æ—Ä</p>
  <div className={styles.autocardBlock}>
  <div className={styles.avatar}></div>
  <div className={styles.authorInfo}>
    <div className={styles.authorHeader}>
    <div className={styles.authorDetails}>
    <p className={styles.name}>{authorData.name}</p>
    {authorData.email && <p className={styles.email}>{authorData.email}</p>}
    </div>
<p className={styles.stats}>
  <span className={styles.statsNumber}>{authorData.recipesCount}</span>
  <span className={styles.statsText}>
    —Ä–µ—Ü–µ–ø—Ç{authorData.recipesCount === 1 ? "" : "—ñ–≤"}
  </span>

  <span className={styles.statsNumber}>
    {formatFollowers(authorData.followers)}
  </span>
  <span className={styles.statsText}>
    –ø—ñ–¥–ø–∏—Å–Ω–∏–∫{authorData.followers === 1 ? "" : "—ñ–≤"}
  </span>
</p>
    </div>
    <button className={styles.subscribeButton}>–ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—å</button>
    </div>
  </div>
</div>

       {/* –ë–ª–æ–∫ —Å –æ—Ç–∑—ã–≤–∞–º–∏ */}
       <section className={styles.commentsBlock}>
   <div className={styles.ratingHeader}>
    <h2 className={styles.commentsTitle}>–ö–æ–º–µ–Ω—Ç–∞—Ä—ñ</h2>
    <div className={styles.userRating}>
      <span className={styles.ratingLabel}>–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å, —â–æ–± –æ—Ü—ñ–Ω–∏—Ç–∏:</span>
      <div className={styles.stars}>
  {[1,2,3,4,5].map((star) => (
    <span
      key={star}
      className={`${styles.star} ${star <= rating ? styles.filled : ""} ${hoverRating === star ? styles.hovered : ""}`}
      onClick={() => setRating(star)}
      onMouseEnter={() => setHoverRating(star)}
      onMouseLeave={() => setHoverRating(0)}
    >
      ‚òÖ
    </span>
  ))}
</div>
    </div>
  </div>
  <hr />

  {/* –§–æ—Ä–º–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è */}
  <form
    className={styles.commentForm}
    onSubmit={(e) => {
      e.preventDefault();
      const target = e.target as typeof e.target & {
        commentInput: { value: string };
      };
      const text = target.commentInput.value.trim();
      if (!text) return;
      setComments((prev) => [
        ...prev,
        { author: "–í–∏", email: "", likes: 0, dislikes: 0, date: new Date().toLocaleDateString(), rating, text },
      ]);
      target.commentInput.value = "";
    }}
  >
    <div className={styles.inputWrapper}>
  <textarea
    name="commentInput"
    className={styles.commentInput}
    placeholder="–î–æ–¥–∞—Ç–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä.."
    rows={3}
  />
  <img src={iconCamera} alt="star" className={styles.inputIcon} />
</div>
    <button type="submit" className={styles.commentButton}>
      –ó–∞–ª–∏—à–∏—Ç–∏ –≤—ñ–¥–≥—É–∫ 
    </button>
  </form>

  {/* –°–ø–∏—Å–æ–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ */}
<div className={styles.commentsBlockPeople}>
  <ul className={styles.commentsList}>
    {comments.map((comment, idx) => (
      <li key={idx} className={styles.commentItem}>
        <div className={styles.commentMainBlock}>
        <div className={styles.avatarComment}></div>
        <div className={styles.commentContent}>
        <div className={styles.commentHeader}>
          <div className={styles.commentAuthorBlock}>
            <div className={styles.authorInfoBlock}>
            <span className={styles.commentAuthor}>{comment.author}</span>
            <span className={styles.commentEmail}>{comment.email}</span>
            </div>
            <span className={styles.commentDate}>{comment.date}</span>
            </div>
            <div className={styles.commentRating}>
              {[1, 2, 3, 4, 5].map((star) => (
                <span
                  key={star}
                  className={`${styles.star} ${
                    star <= comment.rating ? styles.filled : ""
                  }`}
                >
                  ‚òÖ
                </span>
              ))}
            </div>
          </div>
        
        <p className={styles.commentText}>{comment.text}</p>
        <div className={styles.commentActionsBlock}>
          <button className={styles.commentActionButton}>–í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏</button>
          <div className={styles.commentActions}>
          <button className={styles.likeButton} onClick={() => handleLike(idx, "like")}>
            <img src={like} alt="Like" className={styles.icon} /> {comment.likes}
           </button>
            <button className={styles.dislikeButton} onClick={() => handleLike(idx, "dislike")}>
          <img src={dislike} alt="Dislike" className={styles.icon} /> {comment.dislikes}
            </button>
         <button className={styles.reportButton}>
            <img src={more_one} alt="more" className={styles.icon} />
         </button>
        </div>
        </div>
        </div>
        </div>
      </li>
    ))}
  </ul>
  
</div>
  <button className={styles.loadMoreButton}>–î–∏–≤–∏—Ç–∏—Å—å –≤—Å—ñ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ<FaArrowRight /></button>


</section>

   {/* –ë–ª–æ–∫ –°—Ö–æ–∂—ñ —Å—Ç—Ä–∞–≤–∏ */}
<section className={styles.similarRecipesBlock}>
  <div className={styles.similarHeader}>
  <h2 className={styles.similarTitle}>–°—Ö–æ–∂—ñ —Å—Ç—Ä–∞–≤–∏</h2>
   <button className={styles.allButton}  onClick={() => navigate("/recipes")}>
            –í—Å—ñ <ChevronRight size={18} />
          </button>
            </div>
  <div className={styles.similarCardsWrapper}>
    {getAllRecipes()
      .filter(r => r.id !== recipe.id) // –∏—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ä–µ—Ü–µ–ø—Ç
      .slice(0, 3) // –º–∞–∫—Å–∏–º—É–º 4 –∫–∞—Ä—Ç–æ—á–∫–∏
      .map(r => (
        <RecipeCard key={r.id} {...r} />
      ))}
  </div>
</section>



      </section>
    </main>
  );
};

export default ProductInfoPage;
